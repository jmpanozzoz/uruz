Metadata-Version: 2.2
Name: uruz-framework
Version: 0.1.3
Summary: Framework para la creaci√≥n de sistemas multiagente con IA
Author: Tu Nombre
Requires-Python: >=3.8
Description-Content-Type: text/plain
Requires-Dist: fastapi>=0.68.0
Requires-Dist: uvicorn>=0.15.0
Requires-Dist: pydantic>=1.8.2
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: cryptography>=3.4.7
Requires-Dist: redis>=4.0.0
Requires-Dist: sqlalchemy>=1.4.23
Requires-Dist: anthropic>=0.3.0
Requires-Dist: openai>=0.27.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: python-jose>=3.3.0
Requires-Dist: python-multipart>=0.0.5
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: click>=8.0.0
Requires-Dist: paramiko>=3.4.0
Provides-Extra: dev
Requires-Dist: black>=22.3.0; extra == "dev"
Requires-Dist: isort>=5.10.1; extra == "dev"
Requires-Dist: flake8>=4.0.1; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: pre-commit>=2.19.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.1.2; extra == "test"
Requires-Dist: pytest-asyncio>=0.18.3; extra == "test"
Requires-Dist: pytest-cov>=3.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.7.0; extra == "test"
Dynamic: author
Dynamic: description
Dynamic: description-content-type
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Uruz Framework

Uruz es un framework de sistemas multiagente con IA que permite crear, gestionar y desplegar agentes inteligentes que pueden interactuar entre s√≠ y con servicios externos.

## üåü Caracter√≠sticas Principales

- **M√∫ltiples Proveedores de IA**: Soporte para OpenAI y Anthropic (Claude)
- **Sistema de Agentes**: Crea y gestiona m√∫ltiples agentes con diferentes roles
- **Gesti√≥n Segura**: Vault integrado para almacenamiento seguro de credenciales
- **CLI Potente**: Interfaz de l√≠nea de comandos para todas las operaciones
- **API REST**: Endpoints para interactuar con los agentes
- **Cach√© Redis**: Optimizaci√≥n de respuestas y gesti√≥n de estado
- **Base de Datos**: Almacenamiento SQLite para m√©tricas e historial
- **Logging Detallado**: Sistema de logs para monitoreo y debugging
- **Despliegue Automatizado**: Herramientas para publicaci√≥n en PyPI
- **Mantenimiento Integrado**: Sistema de limpieza y optimizaci√≥n

## üìã Requisitos

- Python 3.8+
- Redis (opcional, para cach√©)
- Claves API para los proveedores de IA que desees usar:
  - OpenAI: [Obtener clave](https://platform.openai.com/api-keys)
  - Anthropic: [Obtener clave](https://console.anthropic.com/account/keys)

## üöÄ Instalaci√≥n

```bash
# Instalar desde PyPI
pip install uruz-framework

# O instalar en modo desarrollo
git clone https://github.com/jmpanozzoz/uruz.git
cd uruz
pip install -e .
```

## ‚öôÔ∏è Configuraci√≥n

1. **Inicializar Proyecto**:
```bash
# Crear nuevo proyecto
uruz init --name mi_proyecto
cd mi_proyecto
```

2. **Configurar Credenciales**:
```bash
# Configurar API keys de forma segura
uruz setup-credentials
```

3. **Verificar Configuraci√≥n**:
```bash
# Verificar que todo est√© correcto
uruz check-system
```

4. **Iniciar Servicios**:
```bash
# Iniciar todos los servicios
uruz start
```

## ü§ñ Gesti√≥n de Agentes

### Usando YAML

Crea un archivo en `agents/mi_agente.yaml`:

```yaml
name: mi_agente
type: llm
provider: openai
config:
  model: gpt-3.5-turbo-1106
  temperature: 0.7
  max_tokens: 1024
  system_prompt: |
    Eres un asistente amigable y servicial.
    Siempre respondes en espa√±ol.
```

### Usando Python

```python
from uruz.core.llm_agent import LLMAgent

# Configuraci√≥n del agente
config = {
    "model": "gpt-3.5-turbo-1106",
    "temperature": 0.7,
    "max_tokens": 1024,
    "system_prompt": "Eres un asistente amigable que responde en espa√±ol."
}

# Crear y usar el agente
async def main():
    agent = LLMAgent("asistente", config)
    response = await agent.process_message({
        "content": "¬øCu√°l es la capital de Francia?"
    })
    print(response["response"])

# Ejecutar
import asyncio
asyncio.run(main())
```

## üõ†Ô∏è Comandos Principales

### Inicializaci√≥n
```bash
# Crear nuevo proyecto
uruz init --name mi_proyecto

# Configurar credenciales
uruz setup-credentials

# Verificar sistema
uruz check-system
```

### Servidor
```bash
# Iniciar servidor
uruz serve --debug

# Ver estado
uruz status
```

### Mantenimiento
```bash
# Ejecutar todas las tareas
uruz maintenance run-all

# Limpiar logs antiguos
uruz maintenance cleanup-logs --days 30

# Optimizar base de datos
uruz maintenance optimize-db
```

### Limpieza
```bash
# Limpiar todo
uruz clean all

# Limpiar categor√≠a espec√≠fica
uruz clean category python

# Ver categor√≠as disponibles
uruz clean list-categories
```

### Despliegue
```bash
# Verificar dependencias
uruz deploy check-deps

# Construir proyecto
uruz deploy build

# Publicar nueva versi√≥n
uruz deploy release 1.0.0
```

## üìö Documentaci√≥n

- [Gu√≠a de Instalaci√≥n](docs/installation.md)
- [Referencia CLI](docs/cli.md)
- [Ejemplos](examples/)

## ü§ù Contribuir

1. Fork el repositorio
2. Crea una rama para tu feature (`git checkout -b feature/AmazingFeature`)
3. Commit tus cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abre un Pull Request

## üìù Licencia

Este proyecto est√° licenciado bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para m√°s detalles.
